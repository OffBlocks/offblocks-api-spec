openapi: 3.1.0
info:
  title: OffBlocks API 1.0
  version: 1.0.0
servers:
  - url: https://api.offblocks.xyz/v1
  - url: https://api.sandbox.offblocks.xyz/v1
tags:
  - name: Authentication
  - name: Customers
  - name: Accounts
  - name: Cards
  - name: Transactions
  - name: Webhooks
paths:
  /auth/token:
    post:
      tags:
        - Authentication
      summary: Initial Authentication
      description: Retrieve authentication token using API credentials
      operationId: token
      requestBody:
        content:
          application/json:
            schema:
              required:
                - apiKey
                - apiSecret
              type: object
              properties:
                apiKey:
                  type: string
                  description: Unique API key used to identify your API integration. Note this can be different for live and sandbox environments
                  examples: ["d04953b7-5878-4fd0-8970-0a5f77fbce59"]
                apiSecret:
                  type: string
                  description: Unique secret generated in our console
                  examples: ["64ec977db2e585887c80ed62fe9997994aed8093"]
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
        '400':
          description: Invalid request
        '403':
          description: Invalid credentials
  /customers:
    post:
      tags:
        - Customers
      summary: Create new customer
      description: Creates new customer and generates a KYC verification URL
      operationId: createCustomer
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - id
              properties:
                id:
                  $ref: '#/components/schemas/CustomerId'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
      security:
        - bearerAuth: []
    get:
      tags:
        - Customers
      summary: Retrieve customers
      description: Retrieves customers' details
      operationId: getCustomers
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
      security:
        - bearerAuth: []
  /customers/{customerId}:
    get:
      tags:
        - Customers
      summary: Retrieve customer
      description: Retrieves customer's details
      operationId: getCustomer
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - name: customerId
          in: path
          description: ID of customer to be retrieved
          required: true
          schema:
            $ref: '#/components/schemas/CustomerId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Customer not found
      security:
        - bearerAuth: []
  /customers/{customerId}/deactivate:
    patch:
      tags:
        - Customers
      summary: Deactivate customer
      description: Deactivates customer and all associated resources
      operationId: deactivateCustomer
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
        - name: customerId
          in: path
          description: ID of customer to be deactivated
          required: true
          schema:
            $ref: '#/components/schemas/CustomerId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Customer not found
      security:
        - bearerAuth: []
  /customers/{customerId}/activate:
    patch:
      tags:
        - Customers
      summary: Activate customer
      description: Activates customer and all associated resources
      operationId: activateCustomer
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
        - name: customerId
          in: path
          description: ID of customer to be activated
          required: true
          schema:
            $ref: '#/components/schemas/CustomerId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Customer not found
      security:
        - bearerAuth: []
  /customers/{customerId}/info:
    get:
      tags:
        - Customers
      summary: Retrieve customer info
      description: Retrieves customer's personal details
      operationId: getCustomerInfo
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - name: customerId
          in: path
          description: ID of customer to be retrieved
          required: true
          schema:
            $ref: '#/components/schemas/CustomerId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerInfo'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Customer not found
      security:
        - bearerAuth: []
    put:
      tags:
        - Customers
      summary: Update customer info
      description: Updates customer's personal details
      operationId: updateCustomerInfo
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
        - name: customerId
          in: path
          description: ID of customer to be updated
          required: true
          schema:
            $ref: '#/components/schemas/CustomerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInfo'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerInfo'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Customer not found
      security:
        - bearerAuth: []
  /customers/{customerId}/verification:
    get:
      tags:
        - Customers
      summary: Retrieve latest customer verification info
      description: Retrieves customer's verification details
      operationId: getCustomerVerification
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - name: customerId
          in: path
          description: ID of customer to be retrieved
          required: true
          schema:
            $ref: '#/components/schemas/CustomerId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerVerification'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Customer not found
      security:
        - bearerAuth: []
  /customers/{customerId}/accounts:
    post:
      tags:
        - Accounts
      summary: Create new customer account
      description: Creates new account for the customer
      operationId: createCustomerAccount
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
        - name: customerId
          in: path
          description: ID of customer
          required: true
          schema:
            $ref: '#/components/schemas/CustomerId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - id
                - type
                - currencies
                - signature
              properties:
                id:
                  $ref: '#/components/schemas/AccountId'
                type:
                  type: string
                  description: Type of the account
                  enum:
                    - CARD_ACCOUNT
                currencies:
                  type: array
                  description: Currencies of the account, at least one is required (ISO-4217)
                  items:
                    type: string
                signature:
                  $ref: '#/components/schemas/UserSignature'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Customer not found
      security:
        - bearerAuth: []
    get:
      tags:
        - Accounts
      summary: Retrieve customer accounts
      description: Retrieves customer's accounts
      operationId: getCustomerAccounts
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - name: customerId
          in: path
          description: ID of the customer
          required: true
          schema:
            $ref: '#/components/schemas/CustomerId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Customer not found
      security:
        - bearerAuth: []
  /accounts:
    get:
      tags:
        - Accounts
      summary: Retrieve accounts
      description: Retrieves accounts' details
      operationId: getAccounts
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
      security:
        - bearerAuth: []
  /accounts/{accountId}:
    get:
      tags:
        - Accounts
      summary: Retrieve account
      description: Retrieves account's details
      operationId: getAccount
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - name: accountId
          in: path
          description: ID of account to be retrieved
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Account not found
      security:
        - bearerAuth: []
    delete:
      tags:
        - Accounts
      summary: Close account
      description: Closes account
      operationId: deleteAccount
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
        - name: accountId
          in: path
          description: ID of account to be closed
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - signature
              properties:
                signature:
                  $ref: '#/components/schemas/UserSignature'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Account not found
      security:
        - bearerAuth: []
  /accounts/{accountId}/deactivate:
    patch:
      tags:
        - Accounts
      summary: Deactivate account
      description: Deactivates account and all associated resources
      operationId: deactivateAccount
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
        - name: accountId
          in: path
          description: ID of account to be deactivated
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Account not found
      security:
        - bearerAuth: []
  /accounts/{accountId}/activate:
    patch:
      tags:
        - Accounts
      summary: Activate account
      description: Activates account and all associated resources
      operationId: activateAccount
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
        - name: accountId
          in: path
          description: ID of account to be activated
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Account not found
      security:
        - bearerAuth: []
  /accounts/{accountId}/limits:
    put:
      tags:
        - Accounts
      summary: Create new or update an existing account spending limit
      description: Creates new spending limit for the account or updates an existing one
      operationId: createOrUpdateAccountLimit
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
        - name: accountId
          in: path
          description: ID of the account
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - id
                - token
                - amount
                - period
                - sessionKey
                - signature
              properties:
                id:
                  description: ID for a limit to be created or updated
                  $ref: '#/components/schemas/WalletAddress'
                token:
                  description: ERC-20 token contract address
                  $ref: '#/components/schemas/WalletAddress'
                amount:
                  type: string
                  format: decimal
                  description: Token amount expressed as a decimal
                  examples: ["10.0"]
                period:
                  type: string
                  description: Period for spending limit reset
                  enum:
                    - DAILY
                    - WEEKLY
                    - MONTHLY
                    - YEARLY
                sessionKey:
                  type: string
                  description: Base64 encoded session key used to authorise token transfers on customer's behalf
                  examples: ["MHgwYmZlYjczNDJjMWVhY2IyY2ZjNWFkMWE2YTI1Mzc0MTA3MjA4ZDU4Y2Q1N2UyNzIwNmI4NTY2OWI0MDQ1NWEy"]
                signature:
                  $ref: '#/components/schemas/UserSignature'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Limit'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Customer not found
      security:
        - bearerAuth: []
    get:
      tags:
        - Accounts
      summary: List account spending limits
      description: Retrieves spending limits set up for the account
      operationId: getAccountLimits
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - name: accountId
          in: path
          description: ID of the account
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Limit'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Account not found
      security:
        - bearerAuth: []
  /accounts/{accountId}/limits/{limitId}:
    delete:
      tags:
        - Accounts
      summary: Remove account spending limit
      description: Removes account spending limit
      operationId: deleteAccountLimit
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
        - name: accountId
          in: path
          description: ID of account to be closed
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: limitId
          in: path
          description: ID for a limit to be created or updated
          required: true
          schema:
            $ref: '#/components/schemas/WalletAddress'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - signature
              properties:
                signature:
                  $ref: '#/components/schemas/UserSignature'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Account not found
      security:
        - bearerAuth: []
  
  /accounts/{accountId}/cards:
    post:
      tags:
        - Cards
      summary: Create new card
      description: Creates new card for the account
      operationId: createAccountCard
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
        - name: accountId
          in: path
          description: ID of account
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - id
                - type
                - billingAddress
              properties:
                id:
                  $ref: '#/components/schemas/CardId'
                type:
                  type: string
                  description: Type of the card
                  enum:
                    - VIRTUAL
                    - PHYSICAL
                billingAddress:
                  description: Billing address of a cardholder
                  $ref: '#/components/schemas/Address'
                shippingAddress:
                  description: Shipping address for the card. Required for physical cards
                  $ref: '#/components/schemas/Address'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Card'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Account not found
      security:
        - bearerAuth: []
    get:
      tags:
        - Cards
      summary: Retrieve account cards
      description: Retrieves account's cards
      operationId: getAccountCards
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - name: accountId
          in: path
          description: ID of the account
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Account not found
      security:
        - bearerAuth: []
  /cards:
    get:
      tags:
        - Cards
      summary: Retrieve cards
      description: Retrieves cards' details
      operationId: getCards
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
      security:
        - bearerAuth: []
  /cards/{cardId}:
    get:
      tags:
        - Cards
      summary: Retrieve card
      description: Retrieves card's details
      operationId: getCard
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - name: cardId
          in: path
          description: ID of a card to be retrieved
          required: true
          schema:
            $ref: '#/components/schemas/CardId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Card not found
      security:
        - bearerAuth: []
    delete:
      tags:
        - Cards
      summary: Terminate card
      description: Terminates card
      operationId: deleteCard
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
        - name: cardId
          in: path
          description: ID of a card to be closed
          required: true
          schema:
            $ref: '#/components/schemas/CardId'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Card not found
      security:
        - bearerAuth: []
  /cards/{cardId}/deactivate:
    patch:
      tags:
        - Cards
      summary: Deactivate card
      description: Deactivates card and all associated resources
      operationId: deactivateCard
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
        - name: cardId
          in: path
          description: ID of card to be deactivated
          required: true
          schema:
            $ref: '#/components/schemas/CardId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Account not found
      security:
        - bearerAuth: []
  /cards/{cardId}/activate:
    patch:
      tags:
        - Cards
      summary: Activate card
      description: Activates card and all associated resources
      operationId: activateCard
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
        - name: cardId
          in: path
          description: ID of card to be activated
          required: true
          schema:
            $ref: '#/components/schemas/CardId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Account not found
      security:
        - bearerAuth: []
  /accounts/{accountId}/transactions:
    get:
      tags:
        - Transactions
      summary: Retrieve account transactions
      description: Retrieves account's transactions
      operationId: getAccountTransactions
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - name: accountId
          in: path
          description: ID of the account
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Account not found
      security:
        - bearerAuth: []
  /webhooks:
    put:
      tags:
        - Webhooks
      summary: Create new or update an existing webhook
      description: Creates new webhook subscription or updates an existing one
      operationId: createOrUpdateWebhook
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - id
                - callbackUrl
                - scopes
              properties:
                id:
                  description: Unique ID of the webhook
                  $ref: '#/components/schemas/WalletAddress'
                callbackUrl:
                  type: string
                  description: URL to be subscribed for receiving events
                  examples: ["https://example.com/callback"]
                scopes:
                  type: array
                  description: Scopes for events to be received by the callback
                  items:
                    $ref: '#/components/schemas/EntityUpdateType'
      callbacks:
        webhook:
          '{$request.body#/callbackUrl}':
            post:
              parameters:
                - $ref: '#/components/parameters/SignatureHeader'
              requestBody:
                description: Updates for entities based on subscribed scope
                content:
                  application/json:
                    schema:
                      oneOf: 
                        - $ref: "#/components/schemas/CustomerUpdate"
                        - $ref: "#/components/schemas/AccountUpdate"
                        - $ref: "#/components/schemas/CardUpdate"
                        - $ref: "#/components/schemas/AuthorisationUpdate"
                        - $ref: "#/components/schemas/TransactionUpdate"
                      discriminator:
                        propertyName: entityType
              responses:
                '200':
                  description: Return a 200 status to indicate that the data was received successfully
                  content: 
                    application/json:
                      schema:
                        $ref: '#/components/schemas/WebhookResponse'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Webhook'
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Customer not found
      security:
        - bearerAuth: []
  /webhooks/{webhookId}:
    delete:
      tags:
        - Webhooks
      summary: Remove webhook subscription
      description: Removes webhook subscription
      operationId: deleteWebhook
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
        - name: webhookId
          in: path
          description: ID for a webhook to be removed
          required: true
          schema:
            $ref: '#/components/schemas/WalletAddress'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid request
        '403':
          description: Not authorised
        '404':
          description: Account not found
      security:
        - bearerAuth: []
webhooks:
  '{callbackUrl}':
    post:
      parameters:
        - $ref: '#/components/parameters/SignatureHeader'
      requestBody:
        description: Updates for entities based on subscribed scope
        content:
          application/json:
            schema:
              oneOf: 
                - $ref: "#/components/schemas/CustomerUpdate"
                - $ref: "#/components/schemas/AccountUpdate"
                - $ref: "#/components/schemas/CardUpdate"
                - $ref: "#/components/schemas/AuthorisationUpdate"
                - $ref: "#/components/schemas/TransactionUpdate"
              discriminator:
                propertyName: entityType
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
components:
  schemas:
    Authentication:
      required:
        - token
        - expiresAt
        - tokenType
      type: object
      properties:
        token:
          type: string
          description: JWT token that can be used for further requests to authenticated endpoints
          examples: ["eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"]
        expiresAt:
          type: integer
          description: "`token` expiration time (UNIX timestamp)"
          examples: [1699974342]
        tokenType:
          type: string
          description: '`token` type. Must be "Bearer"'
          examples: ["Bearer"]
    Customer:
      required:
        - id
        - status
        - createdAt
        - updatedAt
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CustomerId'
        status:
          type: string
          description: Customer status
          enum:
            - INITIATING
            - VERIFYING
            - REVIEWING
            - REJECTED
            - ACTIVE
            - INACTIVE
        createdAt:
          type: string
          format: date-time
          description: Date this customer was created (ISO-8601)
        updatedAt:
          type: string
          format: date-time
          description: Date this customer was updated (ISO-8601)
    CustomerId:
      type: string
      description: Unique customer ID in a form of a valid Ethereum address. This would normally correspond to customer's EOA wallet address
      $ref: '#/components/schemas/WalletAddress'

    CustomerInfo:
      type: object
      properties:
        name:
          type: string
          description: Full first and last name of the customer (not initials)
        email:
          type: string
          format: email
          description: The email address of the customer according to RFC 2822. One of email/phone is required
        phone:
          type: string
          description: The phone number of the customer in formats recommended by ITU. The country calling code must be included and prefixed with a +. One of email/phone is required
        dateOfBirth:
          type: string
          format: date
          description: The date of birth of the customer, in YYYY-MM-DD format.
        address:
          $ref: '#/components/schemas/Address'
        updatedAt:
          type: string
          format: date-time
          description: Date customer info was updated (ISO-8601)

    CustomerVerification:
      type: object
      required:
        - level
        - result
        - status
        - provider
      description: Customer verification details for external KYC verification process
      properties:
        url:
          type: string
          description: A KYC verification URL redirecting to KYC provider webpage. Not present if customer has already been approved or rejected
          examples: ["https://api.sumsub.com/idensic/l/#/lPDnIKwzmxPfDohk"]
        level:
          type: string
          description: Customer's verification level
        result:
          type: string
          description: Verification check result
          enum:
            - SUCCESS
            - FAILED
        status:
          type: string
          description: Verification status
          enum:
            - INIT
            - PRECHECKED
            - QUEUED
            - PENDING
            - COMPLETED
            - ON_HOLD
        provider:
          type: string
          description: KYC verification provider
          examples: ["SUMSUB"]
        rejectReason:
          type: string
          description: Reason for verification rejection

    Account:
      required:
        - id
        - customerId
        - status
        - type
        - createdAt
        - updatedAt
      type: object
      properties:
        id:
          $ref: '#/components/schemas/AccountId'
        customerId:
          $ref: '#/components/schemas/CustomerId'
        status:
          type: string
          description: Account status
          enum:
            - INITIATING
            - PENDING
            - ACTIVE
            - INACTIVE
            - CLOSED
        type:
          type: string
          description: Type of the account
          enum:
            - CARD_ACCOUNT
        currencies:
          type: array
          description: Currencies of the account, at least one is required (ISO-4217)
          items:
            type: string
        createdAt:
          type: string
          format: date-time
          description: Date this account was created (ISO-8601)
        updatedAt:
          type: string
          format: date-time
          description: Date this account was updated (ISO-8601)
    AccountId:
      type: string
      description: Unique account ID in a form of a valid Ethereum address. This would normally correspond to customer's SCA address
      $ref: '#/components/schemas/WalletAddress'

    Limit:
      required:
        - id
        - accountId
        - status
        - token
        - amount
        - period
        - createdAt
        - updatedAt
      type: object
      properties:
        id:
          $ref: '#/components/schemas/WalletAddress'
        accountId:
          $ref: '#/components/schemas/AccountId'
        status:
          type: string
          description: Limit status
          enum:
            - INITIATING
            - PENDING
            - ACTIVE
            - INACTIVE
        token:
          description: ERC-20 token contract address
          $ref: '#/components/schemas/WalletAddress'
        amount:
          type: string
          format: decimal
          description: Token amount expressed as a decimal number
          examples: ["10.0"]
        period:
          type: string
          description: Period for spending limit reset
          enum:
            - DAILY
            - WEEKLY
            - MONTHLY
            - YEARLY
        createdAt:
          type: string
          format: date-time
          description: Date this limit was created (ISO-8601)
        updatedAt:
          type: string
          format: date-time
          description: Date this limit was updated (ISO-8601)

    Card:
      required:
        - id
        - accountId
        - customerId
        - type
        - status
        - createdAt
        - updatedAt
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CardId'
        accountId:
          $ref: '#/components/schemas/AccountId'
        customerId:
          $ref: '#/components/schemas/CustomerId'
        type:
          type: string
          description: Type of the card
          enum:
            - VIRTUAL
            - PHYSICAL
        name:
          type: string
          description: Name on the card
          examples: ["John Carter"]
        network:
          type: string
          description: Network brand of the card
          enum:
            - VISA
            - MASTERCARD
        lastFourDigits:
          type: string
          description: Last four digits of card PAN
          examples: ["4039"]
        expirationDate:
          type: string
          description: Expiration date of the card in MM/YYYY format
          examples: ["10/2028"]
        billingAddress:
          $ref: '#/components/schemas/Address'
          description: Billing address of a cardholder
        status:
          type: string
          description: Card status
          enum:
            - INITIATING
            - READY_TO_ISSUE
            - ISSUE_FAILED
            - ISSUE_PENDING
            - INACTIVE
            - ACTIVE
            - REPORTED
            - SUSPENDED
            - TERMINATED
        createdAt:
          type: string
          format: date-time
          description: Date this card was created (ISO-8601)
        updatedAt:
          type: string
          format: date-time
          description: Date this card was updated (ISO-8601)
    CardId:
      type: string
      description: Unique card ID in a form of a valid Ethereum address. This does not correspond to neither EOA nor SCAs of the customer, but the format is the same to ensure consistency
      $ref: '#/components/schemas/WalletAddress'

    Address:
      type: object
      required:
        - firstLine
        - city
        - country
        - postCode
      properties:
        firstLine:
          type: string
          description: First line of address
          examples: ["Flat G"]
        secondLine:
          type: string
          description: Second line of address (optional)
          examples: ["321 West End Lane"]
        city:
          type: string
          description: City
          examples: ["London"]
        state:
          type: string
          description: State or province (optional)
        country:
          type: string
          description: Country code (ISO 3166-1)
          examples: ["GB"]
        postCode:
          type: string
          description: Postal or ZIP code
          examples: ["NW6 2FG"]

    Transaction:
      required:
        - id
        - accountId
        - customerId
        - status
        - createdAt
      type: object
      properties:
        id:
          $ref: '#/components/schemas/TransactionId'
        accountId:
          $ref: '#/components/schemas/AccountId'
        customerId:
          $ref: '#/components/schemas/CustomerId'
        status:
          type: string
          description: Transaction status
          enum:
            - INIT
            - PENDING
            - AUTHORISED
            - REJECTED
            - CLEARED
            - REVERSED
            - COMPLETED
        amount:
          type: integer
          description: Transaction amount expressed in minor units according to ISO-4217
          examples: [125700]
        currency:
          type: string
          description: Currency of the transaction (ISO-4217)
          examples: ["EUR"]
        token:
          description: ERC-20 token contract address
          $ref: '#/components/schemas/WalletAddress'
        tokenAmount:
          type: integer
          description: Token amount expressed in minor units (varies by token, up to 18 decimal points)
          examples: ["100000000"]
        meta:
          type: object
          description: Metadata related to the transaction
          properties: 
            direction:
              type: string
              description: Direction of the transaction
              enum:
                - DEBIT
                - CREDIT
                - NOOP
            exchangeRate:
              type: integer
              description: Exchange rate for transaction if currency is different to account currency expressed in minor units
              examples: [125]
            merchant:
              type: object
              description: Merchant information
              properties: 
                name:
                  type: string
                  description: Name of the merchant
                mcc:
                  type: string
                  description: Merchant Category Code
                country:
                  type: string
                  description: Country code of the merchant location (ISO 3166-1)
                city:
                  type: string
                  description: City of the merchant location
        createdAt:
          type: string
          format: date-time
          description: Date this transaction was created (ISO-8601)
        updatedAt:
          type: string
          format: date-time
          description: Date this transaction was updated (ISO-8601)
    TransactionId:
      type: string
      description: Unique transaction ID in a form of a valid Ethereum transaction hash. Normally, card payment is represented by multiple Ethereum transactions, however for best consistency we use the first transaction hash (outgoing transaction from customer's SCA) to represent an entire payment transaction
      examples: ["0xa3847d82245abb63692bded9da859af0b73b1bfd2409502291c39795eb14954f"]

    Authorisation:
      required:
        - id
        - accountId
        - customerId
        - status
        - createdAt
      type: object
      properties:
        id:
          $ref: '#/components/schemas/AuthorisationId'
        accountId:
          $ref: '#/components/schemas/AccountId'
        customerId:
          $ref: '#/components/schemas/CustomerId'
        status:
          type: string
          description: Transaction status
          enum:
            - PENDING
            - APPROVED
            - REJECTED
        request:
          type: object
          description: Details of pending authorisation request including requested amount in fiat currency and ERC-20 token
          properties:
            amount:
              type: integer
              description: Transaction amount pending authorisation expressed in minor units according to ISO-4217
              examples: [125700]
            currency:
              type: string
              description: Currency of the transaction (ISO-4217)
              examples: ["EUR"]
            token:
              description: ERC-20 token contract address
              $ref: '#/components/schemas/WalletAddress'
            tokenAmount:
              type: integer
              description: Token amount pending authorisation expressed in minor units (varies by token, up to 18 decimal points)
              examples: ["100000000"]
        createdAt:
          type: string
          format: date-time
          description: Date this authorisation was created (ISO-8601)
        updatedAt:
          type: string
          format: date-time
          description: Date this authorisation was updated (ISO-8601)
    AuthorisationId:
      type: string
      description: Unique authorisation ID in a form of a valid Ethereum transaction hash
      examples: ["0xa3847d82245abb63692bded9da859af0b73b1bfd2409502291c39795eb14954f"]

    WalletAddress:
      type: string
      description: Unique ID in a form of a valid Ethereum address
      examples: ["0xf806Ab0C6C8c32345644994987B26c99ac002c5D"]
    
    UserSignature:
      type: object
      required:
        - chainId
        - owner
        - r
        - s
        - v
      description: Cryptographic signature generated using customer's EOA private key according to ERC-1271 (ECDSA algorithm). Signature is used for signing on-chain transactions such as creating a new account, authorising a recurring payment or setting up spending limits
      properties:
        chainId:
          type: integer
          description: ID of a target chain in decimal format (eg 137 for Polygon Mainnet)
          examples: [137]
        owner:
          description: Address of the EOA signer
          $ref: '#/components/schemas/WalletAddress'
        r:
          type: string
          examples: ["0x4355c47d63924e8a72e509b65029052eb6c299d53a04e167c5775fd466751c9d"]
        s:
          type: string
          examples: ["0x07299936d304c153f6443dfa05f40ff007d72911b6f72307f996231605b91562"]
        v:
          type: integer
          examples: [28]
    
    Webhook:
      type: object
      required:
        - id
        - callbackUrl
        - scopes
        - createdAt
      description: Webhook details for subscribed callback URL receiving entity update events
      properties:
        id:
          description: Unique ID of the webhook
          $ref: '#/components/schemas/WalletAddress'
        callbackUrl:
          type: string
          description: URL to be subscribed for receiving events
          examples: ["https://example.com/callback"]
        scopes:
          type: array
          description: Scopes for events to be received by the callback
          items:
            $ref: '#/components/schemas/EntityUpdateType'
        createdAt:
          type: string
          format: date-time
          description: Date this webhook was created (ISO-8601)

    EntityUpdateType:
      type: string
      description: Entity type
      enum:
        - CUSTOMER
        - ACCOUNT
        - CARD
        - AUTHORISATION
        - TRANSACTION

    EntityUpdate:
      type: object
      required:
        - entityType
      description: Event object representing entity update used in webhook callbacks
      properties: 
        entityType:
          $ref: '#/components/schemas/EntityUpdateType'
  
    CustomerUpdate:
      description: Event object representing customer update used in webhook callbacks
      allOf: 
        - $ref: '#/components/schemas/EntityUpdate'
        - $ref: '#/components/schemas/Customer'
  
    AccountUpdate:
      description: Event object representing account update used in webhook callbacks
      allOf: 
        - $ref: '#/components/schemas/EntityUpdate'
        - $ref: '#/components/schemas/Account'
  
    CardUpdate:
      description: Event object representing card update used in webhook callbacks
      allOf: 
        - $ref: '#/components/schemas/EntityUpdate'
        - $ref: '#/components/schemas/Card'
  
    TransactionUpdate:
      description: Event object representing transaction update used in webhook callbacks
      allOf: 
        - $ref: '#/components/schemas/EntityUpdate'
        - $ref: '#/components/schemas/Transaction'
  
    AuthorisationUpdate:
      description: Event object representing authorisation update used in webhook callbacks
      allOf: 
        - $ref: '#/components/schemas/EntityUpdate'
        - $ref: '#/components/schemas/Authorisation'
    
    AuthorisationResponse:
      type: object
      required:
        - approved
      description: Webhook response for relayed payment authorisation logic
      properties: 
        approved:
          type: boolean
          description: Notifies whether the authorisation should be approved or rejected

    EmptyResponse:
      type: object
      description: Empty response for webhook notifications
    
    WebhookResponse:
      oneOf:
        - $ref: '#/components/schemas/AuthorisationResponse'
        - $ref: '#/components/schemas/EmptyResponse'


  parameters:
    SignatureHeader:
      in: header
      name: Signature
      required: true
      description: HTTP signature
      schema:
        type: string
    IdempotencyKeyHeader:
      in: header
      name: Idempotency-Key
      required: true
      description: Idempotency key (free format)
      schema:
        type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
